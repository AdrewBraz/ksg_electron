import { create, fragment } from 'xmlbuilder2';
import {
  format, getMonth, getDate, lastDayOfMonth,
} from 'date-fns';
import { utf8_decode } from './utils';

function makeCounter() {
  let currentCount = 1;

  return {
    getNext() {
      return currentCount++;
    },

  };
}

export default (coll) => {
  const { ksgList, vmpList } = coll;
  const counter = makeCounter();
  const root = create({ encoding: 'windows-1251', standalone: true })
    .ele('ZL_LIST')
    .ele('ZGLV')
    .ele('VERSION')
    .txt('1.0')
    .up()
    .ele('DATA')
    .txt(`${format(new Date(), 'yyyy-MM-dd HH:mm:ss')}`)
    .up()
    .ele('FILENAME')
    .txt(`FM990089F00${format(new Date(), 'yyMMdd')}`)
    .up()
    .ele('SD_Z')
    .txt(Object.values(ksgList).length + Object.values(vmpList).length)
    .up()
    .up()
    .ele('OTPR')
    .ele('CODE_MO')
    .txt(990089)
    .up()
    .ele('YEAR')
    .txt(2021)
    .up()
    .ele('MONTH')
    .txt(getMonth(new Date()) + 1)
    .up()
    .ele('DAY')
    .txt(getDate(lastDayOfMonth(new Date())))
    .up()
    .up();

  Object.values(vmpList).forEach((item) => {
    const adr = utf8_decode(item.ADR_NAME);
    const frag = fragment()
      .ele('N_ZAP').txt(counter.getNext()).up()
      .ele('TYPE')
      .txt('PRIL4')
      .up()
      .ele('PACIENT')
      .up()
      .ele('NPR')
      .ele('IDNPR')
      .txt(`${item.IDNPR}`)
      .up()
      .ele('TAL_D')
      .txt(format(item.TAL_D, 'yyyy-MM-dd'))
      .up()
      .ele('TAL_NUM')
      .txt(`${item.TAL_NUM}`)
      .up()
      .ele('NPR_MO')
      .txt(772209)
      .up()
      .ele('POVOD')
      .txt(item.POVOD)
      .up()
      .ele('DS1')
      .txt(`${item.DS1}`)
      .up()
      .ele('USL_OK')
      .txt(`${item.USL_OK}`)
      .up()
      .ele('VIDPOM')
      .txt(item.VIDPOM)
      .up()
      .ele('FOR_POM')
      .txt(item.FOR_POM)
      .up()
      .ele('PROFIL')
      .txt(item.PROFIL)
      .up()
      .ele('GR_HMP')
      .txt(`${item.GR_HMP}`)
      .up()
      .ele('VID_HMP')
      .txt(`${item.VID_HMP}`)
      .up()
      .ele('METOD_HMP')
      .txt(`${item.METOD_HMP}`)
      .up()
      .ele('RESH_HMP')
      .txt(1)
      .up()
      .ele('PODR')
      .txt(`${item.PODR}`)
      .up()
      .ele('PODR_NAME')
      .txt(`${item.PODR_NAME}`)
      .up()
      .ele('PROFIL_K')
      .txt(67)
      .up()
      .ele('TAL_P')
      .txt(format(item.DATE_Z_1, 'yyyy-MM-dd'))
      .up()
      .up()
      .ele('Z_SL')
      .ele('IDCASE')
      .txt(`${item.IDCASE}`)
      .up()
      .ele('ADR_GAR')
      .txt(`${item.ADR_GAR}`)
      .up()
      .ele('ADR_NAME')
      .txt('121552, г. Москва, город Москва, УЛИЦА ЧЕРЕПКОВСКАЯ 3-Я, ДОМ 15А')
      .up()
      .ele('USL_OK')
      .txt(`${item.USL_OK}`)
      .up()
      .ele('VIDPOM')
      .txt(item.VIDPOM)
      .up()
      .ele('FOR_POM')
      .txt(item.FOR_POM)
      .up()
      .ele('DATE_Z_1')
      .txt(format(item.DATE_Z_1, 'yyyy-MM-dd'))
      .up()
      .ele('DATE_Z_2')
      .txt(format(item.DATE_Z_2, 'yyyy-MM-dd'))
      .up()
      .ele('KD_Z')
      .txt(item.KD_Z)
      .up()
      .ele('RSLT')
      .txt(`${item.RSLT}`)
      .up()
      .ele('ISHOD')
      .txt(`${item.ISHOD}`)
      .up()
      .ele('IS_PRERV')
      .txt(`${item.IS_PRERV}`)
      .up()
      .ele('SL')
      .ele('SL_ID')
      .txt(`${item.IDCASE}`)
      .up()
      .ele('PODR')
      .txt(`${item.PODR}`)
      .up()
      .ele('PODR_NAME')
      .txt(`${item.PODR_NAME}`)
      .up()
      .ele('PROFIL')
      .txt(item.PROFIL)
      .up()
      .ele('PROFIL_K')
      .txt(67)
      .up()
      .ele('NHISTORY')
      .txt(`${item.C_I}`)
      .up()
      .ele('DS_GR')
      .txt(`${item.DS1}`)
      .up()
      .ele('DS1')
      .txt(`${item.DS1}`)
      .up()
      .ele('GR_HMP')
      .txt(`${item.GR_HMP}`)
      .up()
      .ele('VID_HMP')
      .txt(`${item.VID_HMP}`)
      .up()
      .ele('METOD_HMP')
      .txt(`${item.METOD_HMP}`)
      .up()
      .ele('MODEL_HMP')
      .txt(`${item.MODEL_HMP}`)
      .up()
      .ele('LECH_HMP')
      .txt(1)
      .up()
      .up()
      .up();

    root.ele('ZAP').import(frag);
    const { ENP, SNPOLIS } = item;
    if (ENP) {
      const fragPol = fragment()
        .ele('ENP').txt(`${ENP}`).up()
        .ele('W')
        .txt(`${item.W}`)
        .up()
        .ele('DR')
        .txt(format(item.DR, 'yyyy-MM-dd'))
        .up()
        .ele('NOVOR')
        .txt(0)
        .up();
      root.last().first().next().next()
        .import(fragPol);
    }
    if (SNPOLIS) {
      const fragPol = fragment()
        .ele('SNPOLIS').txt(`${SNPOLIS}`).up()
        .ele('W')
        .txt(`${item.W}`)
        .up()
        .ele('DR')
        .txt(format(item.DR, 'yyyy-MM-dd'))
        .up()
        .ele('NOVOR')
        .txt(0)
        .up();
      root.last().first().next().next()
        .import(fragPol);
    }
  });
  Object.values(ksgList).forEach((item) => {
    const {
      ENP, SNPOLIS, cod, SL_K, kslp, PATOLOGY,
    } = item;
    const frag = fragment()
      .ele('N_ZAP').txt(counter.getNext()).up()
      .ele('TYPE')
      .txt('PRIL4')
      .up()
      .ele('PACIENT')
      .up()
      .ele('NPR')
      .ele('IDNPR')
      .txt(`${item.IDNPR}`)
      .up()
      .ele('TAL_D')
      .txt(format(item.TAL_D, 'yyyy-MM-dd'))
      .up()
      .ele('TAL_NUM')
      .txt(`${item.TAL_NUM}`)
      .up()
      .ele('NPR_MO')
      .txt(772209)
      .up()
      .ele('POVOD')
      .txt(item.POVOD)
      .up()
      .ele('DS1')
      .txt(`${item.DS1}`)
      .up()
      .ele('USL_OK')
      .txt(`${item.USL_OK}`)
      .up()
      .ele('VIDPOM')
      .txt(item.VIDPOM)
      .up()
      .ele('FOR_POM')
      .txt(item.FOR_POM)
      .up()
      .ele('PROFIL')
      .txt(item.PROFIL)
      .up()
      .ele('RESH')
      .txt(1)
      .up()
      .ele('PODR')
      .txt(`${item.PODR}`)
      .up()
      .ele('PODR_NAME')
      .txt(`${item.PODR_NAME}`)
      .up()
      .ele('PROFIL_K')
      .txt(`${item.PROFIL_K}`)
      .up()
      .ele('TAL_P')
      .txt(format(item.DATE_Z_1, 'yyyy-MM-dd'))
      .up()
      .up()
      .ele('Z_SL')
      .ele('IDCASE')
      .txt(`${item.IDCASE}`)
      .up()
      .ele('ADR_GAR')
      .txt(`${item.ADR_GAR}`)
      .up()
      .ele('ADR_NAME')
      .txt(`${item.ADR_NAME}`)
      .up()
      .ele('USL_OK')
      .txt(`${item.USL_OK}`)
      .up()
      .ele('VIDPOM')
      .txt(item.VIDPOM)
      .up()
      .ele('FOR_POM')
      .txt(item.FOR_POM)
      .up()
      .ele('DATE_Z_1')
      .txt(format(item.DATE_Z_1, 'yyyy-MM-dd'))
      .up()
      .ele('DATE_Z_2')
      .txt(format(item.DATE_Z_2, 'yyyy-MM-dd'))
      .up()
      .ele('KD_Z')
      .txt(item.KD_Z)
      .up()
      .ele('RSLT')
      .txt(`${item.RSLT}`)
      .up()
      .ele('ISHOD')
      .txt(`${item.ISHOD}`)
      .up()
      .ele('IS_PRERV')
      .txt(`${item.IS_PRERV}`)
      .up()
      .ele('SL')
      .ele('SL_ID')
      .txt(`${item.IDCASE}`)
      .up()
      .ele('PODR')
      .txt(`${item.PODR}`)
      .up()
      .ele('PODR_NAME')
      .txt(`${item.PODR_NAME}`)
      .up()
      .ele('PROFIL')
      .txt(item.PROFIL)
      .up()
      .ele('PROFIL_K')
      .txt(`${item.PROFIL_K}`)
      .up()
      .ele('NHISTORY')
      .txt(`${item.C_I}`)
      .up()
      .ele('DS_GR')
      .txt(`${item.DS1}`)
      .up()
      .ele('DS1')
      .txt(`${item.DS1}`)
      .up()
      .ele('KSG_KPG')
      .ele('N_KSG')
      .txt(`${item.N_KSG}`)
      .up()
      .ele('GR')
      .txt(`${item.GR}`)
      .up()
      .ele('VER_KSG')
      .txt(`${item.VER_KSG}`)
      .up()
      .ele('SL_K')
      .txt(`${item.SL_K}`)
      .up()
      .up()
      .up()
      .up();

    root.ele('ZAP').import(frag);
    if (cod) {
      const fragUsl = fragment()
        .ele('USL')
        .ele('IDSERV').txt(`${item.IDCASE}_1`)
        .up()
        .ele('VID_VME')
        .txt(`${item.cod}`)
        .up()
        .up();
      root.last().last().last().import(fragUsl);
    }
    if (SL_K === 1) {
      const IDSL = kslp === 1.1 ? 1 : 8;
      const fragKSLP = fragment()
        .ele('SL_KOEF')
        .ele('IDSL').txt(`${IDSL}`)
        .up()
        .ele('Z_SL')
        .txt(kslp)
        .up()
        .up();
      if (cod) {
        root.last().last().last().last()
          .prev()
          .import(fragKSLP);
      } else {
        root.last().last().last().last()
          .import(fragKSLP);
      }
    }
    if (ENP) {
      const fragPol = fragment()
        .ele('ENP').txt(`${ENP}`).up()
        .ele('W')
        .txt(`${item.W}`)
        .up()
        .ele('DR')
        .txt(format(item.DR, 'yyyy-MM-dd'))
        .up()
        .ele('NOVOR')
        .txt(0)
        .up();
      root.last().first().next().next()
        .import(fragPol);
    }
    if (SNPOLIS) {
      const fragPol = fragment()
        .ele('SNPOLIS').txt(`${SNPOLIS}`).up()
        .ele('W')
        .txt(`${item.W}`)
        .up()
        .ele('DR')
        .txt(format(item.DR, 'yyyy-MM-dd'))
        .up()
        .ele('NOVOR')
        .txt(0)
        .up();
      root.last().first().next().next()
        .import(fragPol);
    }
    if (PATOLOGY) {
      const fragDS2 = fragment().ele('DS2').txt(`${PATOLOGY}`).up();
      root.last().last().last().import(fragDS2);
    }
  });
  const xml = root.end({ prettyPrint: true });
  return xml;
};
